/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package projetont;

import com.hp.hpl.jena.ontology.Individual;
import com.hp.hpl.jena.ontology.OntClass;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.ontology.OntModelSpec;
import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.QueryExecution;
import com.hp.hpl.jena.query.QueryExecutionFactory;
import com.hp.hpl.jena.query.QueryFactory;
import com.hp.hpl.jena.query.QuerySolution;
import com.hp.hpl.jena.query.ResultSet;
import com.hp.hpl.jena.query.ResultSetFormatter;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.rdf.model.Property;
import com.hp.hpl.jena.rdf.model.RDFNode;
import com.hp.hpl.jena.util.FileManager;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static org.eclipse.jetty.util.IO.delete;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;

/**
 *
 * @author Saber
 */
public class Home extends javax.swing.JFrame {
File f;
private org.jdom.Document document;
private org.jdom.Element racine;
private org.jdom.Element courant;
String filepath,filename;
private String naame;
    /**
     * Creates new form Main2
     */
    public Home() {
        initComponents();
        
        setDefaultCloseOperation(Home.HIDE_ON_CLOSE);
        setResizable(false);
        setTitle("Add Instances");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new org.edisoncor.gui.panel.Panel();
        tabbedPaneHeader1 = new org.edisoncor.gui.tabbedPane.TabbedPaneHeader();
        panel2 = new org.edisoncor.gui.panel.Panel();
        textField1 = new org.edisoncor.gui.textField.TextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea1 = new javax.swing.JTextArea();
        labelMetric2 = new org.edisoncor.gui.label.LabelMetric();
        buttonAction1 = new org.edisoncor.gui.button.ButtonAction();
        buttonAction2 = new org.edisoncor.gui.button.ButtonAction();
        panel4 = new org.edisoncor.gui.panel.Panel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        label = new javax.swing.JLabel();
        bar = new org.edisoncor.gui.progressBar.ProgressBarRound();
        buttonAction4 = new org.edisoncor.gui.button.ButtonAction();

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MetaPro-POP");

        panel2.setColorPrimario(new java.awt.Color(0, 153, 153));
        panel2.setColorSecundario(new java.awt.Color(204, 204, 204));

        textArea1.setColumns(20);
        textArea1.setRows(5);
        jScrollPane1.setViewportView(textArea1);

        labelMetric2.setText("File Name:");

        buttonAction1.setText("Choose XML File");
        buttonAction1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction1ActionPerformed(evt);
            }
        });

        buttonAction2.setText("Run");
        buttonAction2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel2Layout = new javax.swing.GroupLayout(panel2);
        panel2.setLayout(panel2Layout);
        panel2Layout.setHorizontalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonAction1, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(buttonAction2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 271, Short.MAX_VALUE)
                .addComponent(labelMetric2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textField1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        panel2Layout.setVerticalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel2Layout.createSequentialGroup()
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel2Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelMetric2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(buttonAction1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(8, 8, 8)
                .addComponent(buttonAction2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE))
        );

        tabbedPaneHeader1.addTab("Add Instance", panel2);

        panel4.setColorPrimario(new java.awt.Color(0, 153, 153));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        label.setBackground(new java.awt.Color(255, 255, 255));
        label.setForeground(new java.awt.Color(255, 255, 255));

        buttonAction4.setText("Load MetaProPOSv2.owl");
        buttonAction4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel4Layout = new javax.swing.GroupLayout(panel4);
        panel4.setLayout(panel4Layout);
        panel4Layout.setHorizontalGroup(
            panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonAction4, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(bar, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(255, Short.MAX_VALUE))
            .addComponent(jScrollPane3)
        );
        panel4Layout.setVerticalGroup(
            panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonAction4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE))
        );

        tabbedPaneHeader1.addTab("Loading Ontology File", panel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPaneHeader1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(tabbedPaneHeader1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    private void buttonAction4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAction4ActionPerformed
        jTextArea1.setEditable(false);
        affiche();
    }//GEN-LAST:event_buttonAction4ActionPerformed

    
    
    
    
    private void buttonAction2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAction2ActionPerformed
        
        textArea1.setEditable(false);
        //Controle si il y a une fichier à l'entré ou non
        if(filename==null){
            JOptionPane.showMessageDialog(null, "Please Choose XML File !");
        }
        else{

            textArea1.setText("");
            String inputFileName ="MetaProPOSv2.owl";
            String NS = "http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#";

            OntModel model = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM_TRANS_INF, null);

            InputStream in = FileManager.get().open(inputFileName);

            if (in == null) {
                System.out.println("File: " + inputFileName + " not found");
                System.exit(0);
            }
            model.read(in, "RDF/XML");

            SAXBuilder sxb = new SAXBuilder();

            //On crÃ©e un nouveau document JDOM avec en argument le fichier XML

            InputStream is = null;
            try {
                is = new FileInputStream(filepath);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                document=  (org.jdom.Document)sxb.build(is);
            } catch (JDOMException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }

            String nom = null;
            // selection du nom à partir du fichier xml
            racine = document.getRootElement();
            java.util.List listIdentification = racine.getChildren("Identification");
            Iterator j = listIdentification.iterator();
            while(j.hasNext())
            {
                courant = (org.jdom.Element)j.next();
                nom=courant.getChild("Name").getText();
            }
 // selection de probléme à partir du fichier xml
            String problem= racine.getChild( "Problem" ).getValue();
            // selection de la solution à partir du fichier xml
            String solution= racine.getChild( "Solution" ).getValue();
            String context=null;
            // selection du contexte à partir du fichier xml
            java.util.List listContext = racine.getChildren("Context");

            //On crÃ©e un Iterator sur notre liste
            Iterator i = listContext.iterator();

            while(i.hasNext())
            {

                courant = (org.jdom.Element)i.next();
                context = courant.getChild( "InitialContext" ).getText();
            }
//sélection du pattron principal à partir de nom
            String queryString =
            "PREFIX MetaProPOSv2:<http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#>" +

            "select ?Pattern " +

            "where  {" +
            " ?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasName> ?Name FILTER regex(str(?Name) , \"" +nom+ "\" ). "+
            "}";

            Query query1 = QueryFactory.create(queryString);
            QueryExecution qexec1 = QueryExecutionFactory.create(query1, model);
            ResultSet rs3 = qexec1.execSelect() ;
            String pat = null;
            while (  rs3.hasNext()  )
            {
                QuerySolution rb3 = rs3.nextSolution() ;

                RDFNode y4 = rb3.get("Pattern");

                //System.out.println(y4);
                pat= y4.toString();
            }
// selection du probleme à partir du nom de pattron sélectionner
            String query2=
            "select ?Problem "+
            "where  {" +
            "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#HasProblem> ?Problem." +
            "FILTER regex(str(?Pattern),\""+pat+"\")"+

            "}";
            Query query12 = QueryFactory.create(query2);
            QueryExecution qexec12 = QueryExecutionFactory.create(query12, model);
            ResultSet rs13 = qexec12.execSelect() ;
            String prob = null;
            while (  rs13.hasNext()  )
            {
                QuerySolution rb3 = rs13.nextSolution() ;

                RDFNode y4 = rb3.get("Problem");

                //System.out.println(y4);
                String s= y4.toString();
                prob=s.substring(66);
            }

            // selection du solution à partir du nom de pattron sélectionner
            String query3=
            "select ?Solution "+
            "where  {" +
            "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#HasSolution> ?Solution." +
            "FILTER regex(str(?Pattern),\""+pat+"\")"+

            "}";
            Query query13 = QueryFactory.create(query3);
            QueryExecution qexec13 = QueryExecutionFactory.create(query13, model);
            ResultSet rs23 = qexec13.execSelect() ;
            String sol = null;
            while (  rs23.hasNext()  )
            {
                QuerySolution rb3 = rs23.nextSolution() ;

                RDFNode y4 = rb3.get("Solution");

                //System.out.println(y4);
                String s= y4.toString();
                sol=s.substring(66);
            }
            /*
            String query33=
            "select ?Initial_context "+
            "where  {" +
            "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasInitialContext> ?Initial_context." +
            "FILTER regex(str(?Pattern),\""+pat+"\")"+

            "}";
            Query query14 = QueryFactory.create(query33);
            QueryExecution qexec14 = QueryExecutionFactory.create(query14, model);
            ResultSet rs14 = qexec14.execSelect() ;
            String cont = null;
            while (  rs14.hasNext()  )
            {
                QuerySolution rb3 = rs14.nextSolution() ;

                RDFNode y4 = rb3.get("Initia_context");

                //System.out.println(y4);
                cont= y4.toString();
            }
            */
            //System.out.println("cont"+cont);

            //*****************************************************************
//comparaison entre le nom du fichier el nom dans l'ontologie
            String askName =
            "PREFIX MetaProPOSv2: <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#>" +
            "   ASK {"+
            " ?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasName> ?Name FILTER regex(str(?Name), \"" + nom + "\")"+

            "}";
            Query query = QueryFactory.create(askName) ;
            QueryExecution qexec = QueryExecutionFactory.create(query, model) ;
            boolean results = qexec.execAsk() ;
            qexec.close() ;
            

            
            if ((results==true)||(problem == null ? prob == null : problem.equals(prob))|| (solution == null ? sol == null : solution.equals(sol))){
                textArea1.append("pattern exist in this Ontolgy please choose another pattern ! ");

                

                int quest = JOptionPane.showConfirmDialog(null,
                    "Do You Like Update this Pattern", "Please select",
                    JOptionPane.YES_NO_OPTION);
                if(quest==0){

                    String query5=
                    "select ?Identifier "+
                    "where  {" +
                    "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasIdentifier> ?Identifier." +
                    "FILTER regex(str(?Pattern),\""+pat+"\")"+

                    "}";
                    Query query15 = QueryFactory.create(query5);
                    QueryExecution qexec15 = QueryExecutionFactory.create(query15, model);
                    ResultSet rs15 = qexec15.execSelect() ;
                    String id = null;
                    while (  rs15.hasNext()  )
                    {
                        QuerySolution rb3 = rs15.nextSolution() ;

                        RDFNode y4 = rb3.get("Identifier");

                        //System.out.println(y4);
                        String s= y4.toString();
                        id=s.substring(66);
                    }

                    String query6=
                    "select ?Author "+
                    "where  {" +
                    "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasAuthor> ?Author." +
                    "FILTER regex(str(?Pattern),\""+pat+"\")"+

                    "}";
                    Query query16 = QueryFactory.create(query6);
                    QueryExecution qexec16 = QueryExecutionFactory.create(query16, model);
                    ResultSet rs16 = qexec16.execSelect() ;
                    String ath = null;
                    while (  rs16.hasNext()  )
                    {
                        QuerySolution rb3 = rs16.nextSolution() ;

                        RDFNode y4 = rb3.get("Author");

                        //System.out.println(y4);
                        String s= y4.toString();
                        ath=s.substring(66);
                    }

                    String query7=
                    "select ?Domain "+
                    "where  {" +
                    "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasDomain> ?Domain." +
                    "FILTER regex(str(?Pattern),\""+pat+"\")"+

                    "}";
                    Query query17 = QueryFactory.create(query7);
                    QueryExecution qexec17 = QueryExecutionFactory.create(query17, model);
                    ResultSet rs17 = qexec17.execSelect() ;
                    String dom = null;
                    while (  rs17.hasNext()  )
                    {
                        QuerySolution rb3 = rs17.nextSolution() ;

                        RDFNode y4 = rb3.get("Domain");

                        //System.out.println(y4);
                         if(y4!=null){
                        String s= y4.toString();
                        dom=s.substring(66);}
                    }

                    String query8=
                    "select ?Type "+
                    "where  {" +
                    "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasType> ?Type." +
                    "FILTER regex(str(?Pattern),\""+pat+"\")"+

                    "}";
                    Query query18 = QueryFactory.create(query8);
                    QueryExecution qexec18 = QueryExecutionFactory.create(query18, model);
                    ResultSet rs18 = qexec18.execSelect() ;
                    String tp = null;
                    while (  rs18.hasNext()  )
                    {
                        QuerySolution rb3 = rs18.nextSolution() ;

                        RDFNode y4 = rb3.get("Type");

                        //System.out.println(y4);
                         if(y4!=null){
                        String s= y4.toString();
                        tp=s.substring(66);}
                    }

                    String query9=
                    "select ?Collection "+
                    "where  {" +
                    "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasCollection> ?Collection." +
                    "FILTER regex(str(?Pattern),\""+pat+"\")"+

                    "}";
                    Query query19 = QueryFactory.create(query9);
                    QueryExecution qexec19 = QueryExecutionFactory.create(query19, model);
                    ResultSet rs19 = qexec19.execSelect() ;
                    String  col= null;
                    while (  rs19.hasNext()  )
                    {
                        QuerySolution rb3 = rs19.nextSolution() ;

                        RDFNode y4 = rb3.get("Collection");

                        //System.out.println(y4);
                         if(y4!=null){
                        String s= y4.toString();
                        col =s.substring(66);}
                    }

                    String query21=
                    "select ?Abstraction_level "+
                    "where  {" +
                    "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasAbstractionLevel> ?Abstraction_level." +
                    "FILTER regex(str(?Pattern),\""+pat+"\")"+

                    "}";
                    Query query212 = QueryFactory.create(query21);
                    QueryExecution qexec21 = QueryExecutionFactory.create(query212, model);
                    ResultSet rs21 = qexec21.execSelect() ;
                    String abstr = null;
                    while (  rs21.hasNext()  )
                    {
                        QuerySolution rb3 = rs21.nextSolution() ;

                        RDFNode y4 = rb3.get("Abstraction_level");

                        //System.out.println(y4);
                         if(y4!=null){
                        String s= y4.toString();
                        abstr=s.substring(66);}
                    }
                    
                     String query22=
                    "select ?Initial_context "+
                    "where  {" +
                    "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasInitialContext> ?Initial_context." +
                    "FILTER regex(str(?Pattern),\""+pat+"\")"+

                    "}";
                    Query query213 = QueryFactory.create(query22);
                    QueryExecution qexec22 = QueryExecutionFactory.create(query213, model);
                    ResultSet rs22 = qexec22.execSelect() ;
                    String intcntx = null;
                    while (  rs22.hasNext()  )
                    {
                        QuerySolution rb3 = rs22.nextSolution() ;

                        RDFNode y4 = rb3.get("Initial_context");

                        //System.out.println(y4);
                         if(y4!=null){
                        String s= y4.toString();
                        intcntx=s.substring(66);}
                    }
                    
                    
                    
                    String query23=
                    "select ?Resulting_context "+
                    "where  {" +
                    "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasResultingContext> ?Resulting_context." +
                    "FILTER regex(str(?Pattern),\""+pat+"\")"+

                    "}";
                    Query query214 = QueryFactory.create(query23);
                    QueryExecution qexec23 = QueryExecutionFactory.create(query214, model);
                    ResultSet rs24 = qexec23.execSelect() ;
                    String rslcntx = null;
                    while (  rs24.hasNext()  )
                    {
                        QuerySolution rb3 = rs24.nextSolution() ;

                        RDFNode y4 = rb3.get("Resulting_context");

                        //System.out.println(y4);
                         if(y4!=null){
                        String s= y4.toString();
                        rslcntx=s.substring(66);}
                    }
                    
                    
                    
                     String query24=
                    "select ?Confidence "+
                    "where  {" +
                    "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasConfidence> ?Confidence." +
                    "FILTER regex(str(?Pattern),\""+pat+"\")"+

                    "}";
                    Query query215 = QueryFactory.create(query24);
                    QueryExecution qexec24 = QueryExecutionFactory.create(query215, model);
                    ResultSet rs25 = qexec24.execSelect() ;
                    String cnfd = null;
                    while (  rs25.hasNext()  )
                    {
                        QuerySolution rb3 = rs25.nextSolution() ;

                        RDFNode y4 = rb3.get("Confidence");

                        //System.out.println(y4);
                         if(y4!=null){
                        String s= y4.toString();
                        cnfd=s.substring(66);}
                    }
                    
                    
                    
                    String query25=
                    "select ?Discussion "+
                    "where  {" +
                    "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasDiscussion> ?Discussion." +
                    "FILTER regex(str(?Pattern),\""+pat+"\")"+

                    "}";
                    Query query216 = QueryFactory.create(query25);
                    QueryExecution qexec25 = QueryExecutionFactory.create(query216, model);
                    ResultSet rs26 = qexec25.execSelect() ;
                    String disc = null;
                    while (  rs26.hasNext()  )
                    {
                        QuerySolution rb3 = rs26.nextSolution() ;

                        RDFNode y4 = rb3.get("Discussion");

                        //System.out.println(y4);
                         if(y4!=null){
                        String s= y4.toString();
                        disc=s.substring(66);}
                    }
                    
                    
                    String query26=
                    "select ?Force "+
                    "where  {" +
                    "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasForce> ?Force." +
                    "FILTER regex(str(?Pattern),\""+pat+"\")"+

                    "}";
                    Query query217 = QueryFactory.create(query26);
                    QueryExecution qexec26 = QueryExecutionFactory.create(query217, model);
                    ResultSet rs27 = qexec26.execSelect() ;
                    String force = null;
                    while (  rs27.hasNext()  )
                    {
                        QuerySolution rb3 = rs27.nextSolution() ;

                        RDFNode y4 = rb3.get("Force");

                        //System.out.println(y4);
                         if(y4!=null){
                        String s= y4.toString();
                        force=s.substring(66);}
                    }
                    
                    
                    
                    String query27=
                    "select ?Application "+
                    "where  {" +
                    "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasApplication> ?Application." +
                    "FILTER regex(str(?Pattern),\""+pat+"\")"+

                    "}";
                    Query query218 = QueryFactory.create(query27);
                    QueryExecution qexec27 = QueryExecutionFactory.create(query218, model);
                    ResultSet rs28 = qexec27.execSelect() ;
                    String app= null;
                    while (  rs28.hasNext()  )
                    {
                        QuerySolution rb3 = rs28.nextSolution() ;

                        RDFNode y4 = rb3.get("Application");

                        //System.out.println(y4);
                         if(y4!=null){
                        String s= y4.toString();
                        force=s.substring(66);}
                    }
                    
                    
                    String query28=
                    "select ?Example "+
                    "where  {" +
                    "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasExample> ?Example." +
                    "FILTER regex(str(?Pattern),\""+pat+"\")"+

                    "}";
                    Query query219 = QueryFactory.create(query28);
                    QueryExecution qexec28 = QueryExecutionFactory.create(query219, model);
                    ResultSet rs29 = qexec28.execSelect() ;
                    String exmp= null;
                    while (  rs29.hasNext()  )
                    {
                        QuerySolution rb3 = rs29.nextSolution() ;

                        RDFNode y4 = rb3.get("Example");

                        //System.out.println(y4);
                         if(y4!=null){
                        String s= y4.toString();
                        exmp=s.substring(66);}
                    }

                    
                    String query29=
                    "select ?Tool "+
                    "where  {" +
                    "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasTool> ?Tool." +
                    "FILTER regex(str(?Pattern),\""+pat+"\")"+

                    "}";
                    Query query220 = QueryFactory.create(query29);
                    QueryExecution qexec29 = QueryExecutionFactory.create(query220, model);
                    ResultSet rs30 = qexec29.execSelect() ;
                    String tool= null;
                    while (  rs30.hasNext()  )
                    {
                        QuerySolution rb3 = rs30.nextSolution() ;

                        RDFNode y4 = rb3.get("Tool");

                        //System.out.println(y4);
                         if(y4!=null){
                        String s= y4.toString();
                        tool=s.substring(66);}
                    }
                    
                    
                    
                     String query30=
                    "select ?Change_log "+
                    "where  {" +
                    "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasChange_log> ?Change_log." +
                    "FILTER regex(str(?Pattern),\""+pat+"\")"+

                    "}";
                    Query query221 = QueryFactory.create(query30);
                    QueryExecution qexec30 = QueryExecutionFactory.create(query221, model);
                    ResultSet rs31 = qexec30.execSelect() ;
                    String chglog= null;
                    while (  rs31.hasNext()  )
                    {
                        QuerySolution rb3 = rs31.nextSolution() ;

                        RDFNode y4 = rb3.get("Change_log");

                        //System.out.println(y4);
                         if(y4!=null){
                        String s= y4.toString();
                        chglog=s.substring(66);}
                    }
                    
                     String query31=
                    "select ?Creation_date "+
                    "where  {" +
                    "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasCreation_date> ?Creation_date." +
                    "FILTER regex(str(?Pattern),\""+pat+"\")"+

                    "}";
                    Query query222 = QueryFactory.create(query30);
                    QueryExecution qexec31 = QueryExecutionFactory.create(query222, model);
                    ResultSet rs32 = qexec31.execSelect() ;
                    String crdate= null;
                    while (  rs32.hasNext()  )
                    {
                        QuerySolution rb3 = rs32.nextSolution() ;

                        RDFNode y4 = rb3.get("Creation_date");
                     
                        if(y4!=null){
                            String s= y4.toString();
                        crdate=s.substring(66); 
                        }
                        
                    }
                    
                    
                    String query32=
                    "select ?License "+
                    "where  {" +
                    "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasLicense> ?License." +
                    "FILTER regex(str(?Pattern),\""+pat+"\")"+

                    "}";
                    Query query223 = QueryFactory.create(query31);
                    QueryExecution qexec32 = QueryExecutionFactory.create(query223, model);
                    ResultSet rs33 = qexec32.execSelect() ;
                    String license= null;
                    while (  rs33.hasNext()  )
                    {
                        QuerySolution rb3 = rs33.nextSolution() ;

                        RDFNode y4 = rb3.get("License");

                        //System.out.println(y4);
                        if(y4!=null){
                            String s= y4.toString();
                        license=s.substring(66); 
                        }
                       
                    }
                    
                    
                    String query33=
                    "select ?License "+
                    "where  {" +
                    "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasVersion> ?Version." +
                    "FILTER regex(str(?Pattern),\""+pat+"\")"+

                    "}";
                    Query query224 = QueryFactory.create(query32);
                    QueryExecution qexec33 = QueryExecutionFactory.create(query224, model);
                    ResultSet rs34 = qexec33.execSelect() ;
                    String version= null;
                    while (  rs34.hasNext()  )
                    {
                        QuerySolution rb3 = rs34.nextSolution() ;

                        RDFNode y4 = rb3.get("Version");

                        //System.out.println(y4);
                         if(y4!=null){
                        String s= y4.toString();
                        version=s.substring(66);}
                    }
                    
                    
                    String query34=
                    "select ?Alternative "+
                    "where  {" +
                    "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#isAlternative> ?Alternative." +
                    "FILTER regex(str(?Pattern),\""+pat+"\")"+

                    "}";
                    Query query225 = QueryFactory.create(query33);
                    QueryExecution qexec34 = QueryExecutionFactory.create(query225, model);
                    ResultSet rs35 = qexec34.execSelect() ;
                    String altrn= null;
                    while (  rs35.hasNext()  )
                    {
                        QuerySolution rb3 = rs35.nextSolution() ;

                        RDFNode y4 = rb3.get("Alternative");

                        //System.out.println(y4);
                         if(y4!=null){
                        String s= y4.toString();
                        altrn=s.substring(66);}
                    }
                    

                    String query35=
                    "select ?Anti_pattern "+
                    "where  {" +
                    "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#isAntipattern> ?Anti_pattern." +
                    "FILTER regex(str(?Pattern),\""+pat+"\")"+

                    "}";
                    Query query226 = QueryFactory.create(query34);
                    QueryExecution qexec35 = QueryExecutionFactory.create(query226, model);
                    ResultSet rs36 = qexec35.execSelect() ;
                    String antip= null;
                    while (  rs36.hasNext()  )
                    {
                        QuerySolution rb3 = rs36.nextSolution() ;

                        RDFNode y4 = rb3.get("Anti_pattern");

                        //System.out.println(y4);
                         if(y4!=null){
                        String s= y4.toString();
                        antip=s.substring(66);}
                    }
                    
                    
                    String query36=
                    "select ?Similar "+
                    "where  {" +
                    "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#isSimilar> ?Similar." +
                    "FILTER regex(str(?Pattern),\""+pat+"\")"+

                    "}";
                    Query query227 = QueryFactory.create(query35);
                    QueryExecution qexec36 = QueryExecutionFactory.create(query227, model);
                    ResultSet rs37 = qexec36.execSelect() ;
                    String similar= null;
                    while (  rs37.hasNext()  )
                    {
                        QuerySolution rb3 = rs37.nextSolution() ;

                        RDFNode y4 = rb3.get("Similar");

                        //System.out.println(y4);
                         if(y4!=null){
                        String s= y4.toString();
                        similar=s.substring(66);}
                    }
                    
                    
                    String query37=
                    "select ?Refined "+
                    "where  {" +
                    "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#Refines> ?Refined." +
                    "FILTER regex(str(?Pattern),\""+pat+"\")"+

                    "}";
                    Query query228 = QueryFactory.create(query36);
                    QueryExecution qexec37 = QueryExecutionFactory.create(query228, model);
                    ResultSet rs38 = qexec37.execSelect() ;
                    String refined= null;
                    while (  rs38.hasNext()  )
                    {
                        QuerySolution rb3 = rs38.nextSolution() ;

                        RDFNode y4 = rb3.get("Refined");

                        //System.out.println(y4);
                         if(y4!=null){
                        String s= y4.toString();
                        refined=s.substring(66);}
                    }
                    
                    
                    
                    String query38=
                    "select ?Required "+
                    "where  {" +
                    "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#Requires> ?Required." +
                    "FILTER regex(str(?Pattern),\""+pat+"\")"+

                    "}";
                    Query query229 = QueryFactory.create(query37);
                    QueryExecution qexec38 = QueryExecutionFactory.create(query229, model);
                    ResultSet rs39 = qexec38.execSelect() ;
                    String required= null;
                    while (  rs39.hasNext()  )
                    {
                        QuerySolution rb3 = rs39.nextSolution() ;

                        RDFNode y4 = rb3.get("Required");

                        //System.out.println(y4);
                         if(y4!=null){
                        String s= y4.toString();
                        required=s.substring(66);}
                    }
                    
                    String query39=
                    "select ?Role "+
                    "where  {" +
                    "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#HasRole> ?Role." +
                    "FILTER regex(str(?Pattern),\""+pat+"\")"+

                    "}";
                    Query query230 = QueryFactory.create(query38);
                    QueryExecution qexec39 = QueryExecutionFactory.create(query230, model);
                    ResultSet rs40 = qexec39.execSelect() ;
                    String role= null;
                    while (  rs40.hasNext()  )
                    {
                        QuerySolution rb3 = rs40.nextSolution() ;

                        RDFNode y4 = rb3.get("Role");

                        //System.out.println(y4);
                         if(y4!=null){
                        String s= y4.toString();
                        role=s.substring(66);}
                    }
                    
                    
                    
                    Individual I1 = model.getIndividual(NS +nom);

                    Property prop2 = model.getProperty(NS +"hasName");
                    Individual I2 = model.getIndividual(NS + nom);

                    model.removeAll(I1, prop2, I2);

                    Property prop3 = model.getProperty(NS +"hasIdentifier");
                    Individual I3 = model.getIndividual(NS + id );
                    model.removeAll(I1, prop3, I3);

                    Property prop4 = model.getProperty(NS +"hasAuthor");
                    Individual I4 = model.getIndividual(NS + ath );
                    model.removeAll(I1, prop4, I4);

                    Property prop5 = model.getProperty(NS +"hasDomain");
                    Individual I5 = model.getIndividual(NS + dom );
                    model.removeAll(I1, prop5, I5);

                    Property prop6 = model.getProperty(NS +"hasType");
                    Individual I6 = model.getIndividual(NS + tp );
                    model.removeAll(I1, prop6, I6);

                    Property prop7 = model.getProperty(NS +"hasCollection");
                    Individual I7 = model.getIndividual(NS + col );
                    model.removeAll(I1, prop7, I7);

                    Property prop8 = model.getProperty(NS +"hasAbstractionLevel");
                    Individual I8 = model.getIndividual(NS + abstr );
                    model.removeAll(I1, prop4, I8);

                    Property prop9 = model.getProperty(NS +"HasProblem");
                    Individual I9 = model.getIndividual(NS + prob );
                    model.removeAll(I1, prop9, I9);

                    Property prop10 = model.getProperty(NS +"HasSolution");
                    Individual I10 = model.getIndividual(NS + sol );
                    model.removeAll(I1, prop10, I10);
                    
                    Property prop11 = model.getProperty(NS +"hasInitialContext");
                    Individual I11 = model.getIndividual(NS + intcntx );
                    model.removeAll(I1, prop11, I11);
                    
                    Property prop12 = model.getProperty(NS +"hasResultingContext");
                    Individual I12 = model.getIndividual(NS + rslcntx );
                    model.removeAll(I1, prop12, I12);
                    
                    
                    Property prop13 = model.getProperty(NS +"hasConfidence");
                    Individual I13 = model.getIndividual(NS + cnfd );
                    model.removeAll(I1, prop13, I13);
                    
                    Property prop14 = model.getProperty(NS +"hasDiscussion");
                    Individual I14 = model.getIndividual(NS + disc );
                    model.removeAll(I1, prop14, I14);
                    
                    
                    Property prop15 = model.getProperty(NS +"hasForce");
                    Individual I15 = model.getIndividual(NS + force );
                    model.removeAll(I1, prop15, I15);
                    
                    Property prop16 = model.getProperty(NS +"hasApplication");
                    Individual I16 = model.getIndividual(NS + app );
                    model.removeAll(I1, prop16, I16);
                    
                    Property prop17 = model.getProperty(NS +"hasExample");
                    Individual I17 = model.getIndividual(NS + exmp );
                    model.removeAll(I1, prop17, I17);
                    
                    Property prop18 = model.getProperty(NS +"hasTool");
                    Individual I18 = model.getIndividual(NS + exmp );
                    model.removeAll(I1, prop18, I18);
                    
                    Property prop19 = model.getProperty(NS +"hasChange_log");
                    Individual I19 = model.getIndividual(NS + chglog );
                    model.removeAll(I1, prop19, I19);
                    
                    Property prop20 = model.getProperty(NS +"hasCreation_date");
                    Individual I20 = model.getIndividual(NS + crdate );
                    model.removeAll(I1, prop20, I20);
                    
                    Property prop21 = model.getProperty(NS +"hasLicense");
                    Individual I21 = model.getIndividual(NS + license );
                    model.removeAll(I1, prop21, I21);
                    
                    Property prop22 = model.getProperty(NS +"hasVersion");
                    Individual I22 = model.getIndividual(NS + license );
                    model.removeAll(I1, prop22, I22);
                    
                    Property prop23 = model.getProperty(NS +"isAlternative");
                    Individual I23 = model.getIndividual(NS + altrn );
                    model.removeAll(I1, prop23, I23);
                    
                    Property prop24 = model.getProperty(NS +"isAntipattern");
                    Individual I24 = model.getIndividual(NS + antip );
                    model.removeAll(I1, prop24, I24);
                    
                    Property prop25 = model.getProperty(NS +"isSimilar");
                    Individual I25 = model.getIndividual(NS + similar );
                    model.removeAll(I1, prop25, I25);
                    
                    Property prop26 = model.getProperty(NS +"Refines");
                    Individual I26 = model.getIndividual(NS + refined );
                    model.removeAll(I1, prop26, I26);
                    
                    Property prop27 = model.getProperty(NS +"Requires");
                    Individual I27 = model.getIndividual(NS + required );
                    model.removeAll(I1, prop27, I27);
                    
                    Property prop28 = model.getProperty(NS +"HasRole");
                    Individual I28 = model.getIndividual(NS + role );
                    model.removeAll(I1, prop28, I28);
                    
                    
                    I1.remove();
                    PrintStream p = null;
                    try {
                        p = new PrintStream("MetaProPOSv2.owl");
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    model.write(p);
                    p.close();
                    //model.close();

                    
                    try {
                        Peuplement();
                    } catch ( JDOMException | IOException ex) {
                        Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null, "Pattern Not Update");}

            }
            else{

                try {
                    Peuplement();

                    //aJOptionPane.showMessageDialog(null,"Please Select XML File");
                } catch ( JDOMException | IOException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }}

            }
    }//GEN-LAST:event_buttonAction2ActionPerformed

    private void buttonAction1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAction1ActionPerformed
        JFileChooser chooser= new JFileChooser();
        chooser.showOpenDialog(null);
        File f= chooser.getSelectedFile();
        if (f!=null){

            filepath=f.getAbsolutePath();
            filename=f.getName();
            textField1.setText(filename);
        }
    }//GEN-LAST:event_buttonAction1ActionPerformed

    
    
    
    public void Peuplement() throws FileNotFoundException, JDOMException, IOException{
        
        
        courant=null ;

        //On crÃ©e une instance de SAXBuilder
        SAXBuilder sxb = new SAXBuilder();

        //On crÃ©e un nouveau document JDOM avec en argument le fichier XML
 
        try {
               InputStream is = new FileInputStream(filepath);
               document=  (org.jdom.Document)sxb.build(is); 
         } catch (FileNotFoundException ex) {
           Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);}
        
        
        racine = document.getRootElement();    
        
 

        java.util.List listIdentification = racine.getChildren("Identification");
        //System.out.println(racine.getName());
        Iterator j = listIdentification.iterator();
                while(j.hasNext())
        {
            textArea1.append("Identification ");
            textArea1.append("\n");

            courant = (org.jdom.Element)j.next();

            //On affiche le nom de lâ€™Ã©lÃ©ment courant
            textArea1.append("Identifier : " +courant.getChild("Identifier").getText());
            textArea1.append("\n");
            textArea1.append("Name : " +courant.getChild("Name").getText());
            textArea1.append("\n");
            textArea1.append("Author : " +courant.getChild("Author").getText());
            textArea1.append("\n");
naame=courant.getChild("Name").getText();
        
      String inputFileName ="MetaProPOSv2.owl";
        String NS = "http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#";
        
        OntModel model = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM_TRANS_INF, null);
		
	    InputStream in = FileManager.get().open(inputFileName);            
            
         if (in == null) {
                     System.out.println("File: " + inputFileName + " not found");
                     System.exit(0);
                       }
         model.read(in, "RDF/XML");

            
        
         
         OntClass classPattern = model.getOntClass(NS +"Pattern");
         Individual I1 = model.createIndividual(NS +naame, classPattern);
            

            //ObjectProperty hasAuthor
            OntClass classAuthor = model.getOntClass(NS + "Author");
            Individual I2 = model.createIndividual(NS + courant.getChild("Author").getText(), classAuthor);
            
        
  Property prop2 = model.getProperty(NS +"hasAuthor");
  
  model.add(I1,prop2,I2);

      
      
      OntClass classIdentifier = model.getOntClass(NS + "Identifier");
      Individual I3 = model.createIndividual(NS + courant.getChild("Identifier").getText(), classIdentifier);
            
        
  Property prop3 = model.getProperty(NS +"hasIdentifier");


  model.add(I1,prop3,I3);
     
            

            

            //ObjectProperty hasName
            OntClass className = model.getOntClass(NS + "Name");
           Individual I4 = model.createIndividual(NS + courant.getChild("Name").getText(), className);

            
            Property prop4 = model.getProperty(NS +"hasName");

			model.add(I1, prop4, I4);
  
       PrintStream p;
           
         p = new PrintStream("MetaProPOSv2.owl");
                model.write(p);
                p.close();
            
           
                                           }
                
              

				java.util.List listContext = racine.getChildren("Context");	
                                        
				//On crÃ©e un Iterator sur notre liste
				Iterator i = listContext.iterator();

				while(i.hasNext())
				{
                                    
                
                		
				textArea1.append("Context");
				textArea1.append("\n");
					
				    courant = (org.jdom.Element)i.next();
				    //On affiche le nom de lâ€™Ã©lÃ©ment courant
				    
				    textArea1.append("InitialContext : " +courant.getChild("InitialContext").getText());
                                    textArea1.append("\n");
				     textArea1.append("ResultingContext : " +courant.getChild("ResultingContext").getText());
                                     textArea1.append("\n");
                                     
                                     String inputFileName ="MetaProPOSv2.owl";
        String NS = "http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#";
        
        OntModel model = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM_TRANS_INF, null);
	
        
	

       					
	    InputStream in = FileManager.get().open(inputFileName);            
            
         if (in == null) {
                     System.out.println("File: " + inputFileName + " not found");
                     System.exit(0);
                       }
         model.read(in, "RDF/XML");

                                     
                                     
	
									    
  OntClass classPattern = model.getOntClass(NS + "Pattern");
  Individual I1 = model.createIndividual(NS + naame, classPattern);
									    
		//ObjectProperty hasContext
		OntClass classInitialContext = model.getOntClass(NS + "Initial_context");
		Individual I5 = model.createIndividual(NS + courant.getChild("InitialContext").getText(), classInitialContext);

						Property prop5 = model.getProperty(NS +"hasInitialContext");
	model.add(I1, prop5, I5);
                
               	        //ObjectProperty hasContext
                 	OntClass classResultingContext = model.getOntClass(NS + "Resulting_context");
						Individual I6 = model.createIndividual(NS + courant.getChild("ResultingContext").getText(), classResultingContext);

						Property prop6 = model.getProperty(NS +"hasResultingContext");

			
	    model.add(I1, prop6, I6);
									    
									    
									    
						// model.write(System.out);
									    

						PrintStream p;
						
						p = new PrintStream("MetaProPOSv2.owl"); 
							model.write(p);
						p.close();
						
                
                                }
                                
                                java.util.List listClassification = racine.getChildren("Classification");	
                                        
				//On crÃ©e un Iterator sur notre liste
				Iterator c = listClassification.iterator();

				while(c.hasNext())
				{
                                    
                                    textArea1.append("Classification");
				textArea1.append("\n");
					
				    courant = (org.jdom.Element)c.next();
				    //On affiche le nom de lâ€™Ã©lÃ©ment courant
				    
				    textArea1.append("Abstraction_level : " +courant.getChild("AbstractionLevel").getText());
                                    textArea1.append("\n");
				     textArea1.append("Domain : " +courant.getChild("Domain").getText());
                                     textArea1.append("\n");
                                     textArea1.append("Collection : " +courant.getChild("Collection").getText());
                                     textArea1.append("\n");
                                     textArea1.append("Type : " +courant.getChild("Type").getText());
                                     textArea1.append("\n");
                                     
                                     
                                     String inputFileName ="MetaProPOSv2.owl";
        String NS = "http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#";
        
        OntModel model = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM_TRANS_INF, null);
				
	    InputStream in = FileManager.get().open(inputFileName);            
            
         if (in == null) {
                     System.out.println("File: " + inputFileName + " not found");
                     System.exit(0);
                       }
         model.read(in, "RDF/XML");

                                     
                                     
	
									    
  OntClass classPattern = model.getOntClass(NS + "Pattern");
  Individual I1 = model.createIndividual(NS + naame, classPattern);

  
  
OntClass classAbstractionLevel = model.getOntClass(NS + "Abstraction_level");
Individual I7 = model.createIndividual(NS + courant.getChild("AbstractionLevel").getText(), classAbstractionLevel);

Property prop7 = model.getProperty(NS +"hasAbstractionLevel");
	model.add(I1, prop7, I7);
                                    
                                    
          OntClass classDomain = model.getOntClass(NS + "Domain");
Individual I8 = model.createIndividual(NS + courant.getChild("Domain").getText(), classDomain);

Property prop8 = model.getProperty(NS +"hasDomain");
	model.add(I1, prop8, I8);
        
        
        OntClass classCollection = model.getOntClass(NS + "Collection");
Individual I9 = model.createIndividual(NS + courant.getChild("Collection").getText(), classCollection);

Property prop9 = model.getProperty(NS +"hasCollection");
	model.add(I1, prop9, I9);
        
        OntClass classType = model.getOntClass(NS + "Type");
Individual I10 = model.createIndividual(NS + courant.getChild("Type").getText(), classType);

Property prop10 = model.getProperty(NS +"hasType");
	model.add(I1, prop10, I10);
        
        PrintStream p;
						
	p = new PrintStream("MetaProPOSv2.owl");
        model.write(p);
        p.close();
                                }
                                
                                
                                
                                List listRelationship = racine.getChildren("Relationship");
				
				//On crée un Iterator sur notre liste
				Iterator l = listRelationship.iterator();
				while(l.hasNext())
				{
                 String inputFileName ="MetaProPOSv2.owl";
        String NS = "http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#";
        
        OntModel model = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM_TRANS_INF, null);
				
	    InputStream in = FileManager.get().open(inputFileName);            
            
         if (in == null) {
                     System.out.println("File: " + inputFileName + " not found");
                     System.exit(0);
                       }
         model.read(in, "RDF/XML");
                                    
                                    textArea1.append("Relationship");
				textArea1.append("\n");
					//On recrée l'Element courant à chaque tour de boucle afin de
				    //pouvoir utiliser les méthodes propres aux Element comme :
				    //sélectionner un nœud fils, modifier du texte, etc...
				courant = (org.jdom.Element)l.next(); 
                              
				    //On affiche le nom de l’élément courant
				  
				    textArea1.append("Required : " +courant.getChild("Required").getText());
				    textArea1.append("\n");
				    textArea1.append("Refined : " +courant.getChild("Refined").getText());
				    textArea1.append("\n");
				    textArea1.append("Similar : " +courant.getChild("Similar").getText());
				    textArea1.append("\n");
				    textArea1.append("Alternative : " +courant.getChild("Alternative").getText());
				    textArea1.append("\n");
                                    
         OntClass classPattern = model.getOntClass(NS + "Pattern");
         Individual I1 = model.createIndividual(NS +naame, classPattern);
									    
									   
OntClass classRequired = model.getOntClass(NS + "Required");
Individual I15 = model.createIndividual(NS + courant.getChild( "Required" ).getValue(), classRequired);
Property prop15 = model.getProperty(NS +"Requires");
     model.add(I1, prop15, I15);                     
                                    
     OntClass classRefined = model.getOntClass(NS + "Refined");
Individual I16 = model.createIndividual(NS + courant.getChild( "Refined" ).getValue(), classRefined);
Property prop16 = model.getProperty(NS +"Refines");
     model.add(I1, prop16, I16);        
     
     OntClass classSimilar = model.getOntClass(NS + "Similar");
Individual I17 = model.createIndividual(NS + courant.getChild( "Similar" ).getValue(), classSimilar);
Property prop17 = model.getProperty(NS +"isSimilar");
     model.add(I1, prop17, I17);                     
     
    OntClass classAlternative = model.getOntClass(NS + "Alternative");
Individual I18 = model.createIndividual(NS + courant.getChild( "Alternative" ).getValue(), classAlternative);
Property prop18 = model.getProperty(NS +"isAlternative");
     model.add(I1, prop18, I18);                                                         
                                    
     OntClass classAnti_pattern = model.getOntClass(NS + "Anti_pattern");
Individual I19 = model.createIndividual(NS + courant.getChild( "Antipattern" ).getValue(), classAnti_pattern);
Property prop19 = model.getProperty(NS +"isAntipattern");
     model.add(I1, prop19, I19);      
     
     
       PrintStream p;
						
	p = new PrintStream("MetaProPOSv2.owl");
        model.write(p);
       p.close();                        
     
                                }    
                                
                                
                                List listGuidance = racine.getChildren("Guidance");
				textArea1.append("Guidance");
				textArea1.append("\n");
				//On crée un Iterator sur notre liste
				Iterator m = listGuidance.iterator();
				while(m.hasNext())
				{
                                    courant = (org.jdom.Element)m.next(); 
                                    
                                    textArea1.append("Application : " +courant.getChild("Application").getText());
				    textArea1.append("\n");
				    textArea1.append("Example : " +courant.getChild("Example").getText());
				    textArea1.append("\n");
				    textArea1.append("Tool : " +courant.getChild("Tool").getText());
				    textArea1.append("\n");
                      			
                                    
                                    
                                    String inputFileName ="MetaProPOSv2.owl";
        String NS = "http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#";
        
        OntModel model = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM_TRANS_INF, null);
				
	    InputStream in = FileManager.get().open(inputFileName);            
            
         if (in == null) {
                     System.out.println("File: " + inputFileName + " not found");
                     System.exit(0);
                       }
         model.read(in, "RDF/XML");
         
         OntClass classPattern = model.getOntClass(NS + "Pattern");
         Individual I1 = model.createIndividual(NS +naame, classPattern);
									    
									   
OntClass classApplication = model.getOntClass(NS + "Application");
Individual I20 = model.createIndividual(NS + courant.getChild( "Application" ).getValue(), classApplication);
Property prop20 = model.getProperty(NS +"hasApplication");
     model.add(I1, prop20, I20);                     
         
     OntClass classExample = model.getOntClass(NS + "Example");
Individual I21 = model.createIndividual(NS + courant.getChild( "Example" ).getValue(), classExample);
Property prop21 = model.getProperty(NS +"hasExample");
     model.add(I1, prop21, I21);                     
         
     OntClass classTool = model.getOntClass(NS + "Tool");
Individual I22 = model.createIndividual(NS + courant.getChild( "Tool" ).getValue(), classTool);
Property prop22 = model.getProperty(NS +"hasTool");
     model.add(I1, prop22, I22);                     
                                    
            PrintStream p;
						
	p = new PrintStream("MetaProPOSv2.owl");
        model.write(p);
       p.close();                                                 
                                    
                                }
                                
                                List listEvaluation = racine.getChildren("Evaluation");
				textArea1.append("Evaluation");
				textArea1.append("\n");
				//On crée un Iterator sur notre liste
				Iterator n = listEvaluation.iterator();
				while(n.hasNext())
				{
                                    courant = (org.jdom.Element)n.next(); 
                                    
                                    textArea1.append("Discussion : " +courant.getChild("Discussion").getText());
				    textArea1.append("\n");
				    textArea1.append("Force : " +courant.getChild("Force").getText());
				    textArea1.append("\n");
				    textArea1.append("Confidence : " +courant.getChild("Confidence").getText());
				    textArea1.append("\n");
				    textArea1.append("Acknowledgement : " +courant.getChild("Acknowledgement").getText());
				    textArea1.append("\n");                              
                                    
                                    		
                                                        
                                    String inputFileName ="MetaProPOSv2.owl";
        String NS = "http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#";
        
        OntModel model = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM_TRANS_INF, null);
				
	    InputStream in = FileManager.get().open(inputFileName);            
            
         if (in == null) {
                     System.out.println("File: " + inputFileName + " not found");
                     System.exit(0);
                       }
         model.read(in, "RDF/XML");
         
         OntClass classPattern = model.getOntClass(NS + "Pattern");
         Individual I1 = model.createIndividual(NS +naame, classPattern);
									    
									   
OntClass classDiscussion = model.getOntClass(NS + "Discussion");
Individual I23 = model.createIndividual(NS + courant.getChild( "Discussion" ).getValue(), classDiscussion);
Property prop23 = model.getProperty(NS +"hasDiscussion");
     model.add(I1, prop23, I23);
                                    
     OntClass classConfidence = model.getOntClass(NS + "Confidence");
Individual I24 = model.createIndividual(NS + courant.getChild( "Confidence" ).getValue(), classConfidence);
Property prop24 = model.getProperty(NS +"hasConfidence");
     model.add(I1, prop24, I24);
                                    
     OntClass classForce = model.getOntClass(NS + "Force");
Individual I25 = model.createIndividual(NS + courant.getChild( "Force" ).getValue(), classForce);
Property prop25 = model.getProperty(NS +"hasForce");
     model.add(I1, prop25, I25);
     
     PrintStream p;
						
	p = new PrintStream("MetaProPOSv2.owl");
        model.write(p);
       p.close();                        
                                    
                                    
                                }
                                List listManagement = racine.getChildren("Management");
				textArea1.append("Management");
				textArea1.append("\n");
				//On crée un Iterator sur notre liste
				Iterator o = listManagement.iterator();
				while(o.hasNext())
				{
                                    courant = (org.jdom.Element)o.next(); 
                                    textArea1.append("Version : " +courant.getChild("Version").getText());
				    textArea1.append("\n");
				    textArea1.append("CreationDate : " +courant.getChild("CreationDate").getText());
				    textArea1.append("\n");
				    textArea1.append("ChangeLog : " +courant.getChild("ChangeLog").getText());
				    textArea1.append("\n");
				    textArea1.append("Credits : " +courant.getChild("Credits").getText());
				    textArea1.append("\n");
				    textArea1.append("Copyright : " +courant.getChild("Copyright").getText());
				    textArea1.append("\n");
				    textArea1.append("License : " +courant.getChild("License").getText());
				    textArea1.append("\n");
                                    

                                    String inputFileName ="MetaProPOSv2.owl";
        String NS = "http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#";
        
        OntModel model = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM_TRANS_INF, null);
				
	    InputStream in = FileManager.get().open(inputFileName);            
            
         if (in == null) {
                     System.out.println("File: " + inputFileName + " not found");
                     System.exit(0);
                       }
         model.read(in, "RDF/XML");
         
         OntClass classPattern = model.getOntClass(NS + "Pattern");
         Individual I1 = model.createIndividual(NS +naame, classPattern);
									    
									   
OntClass classVersion = model.getOntClass(NS + "Version");
Individual I26 = model.createIndividual(NS + courant.getChild( "Version" ).getValue(), classVersion);
Property prop26 = model.getProperty(NS +"hasVersion");
     model.add(I1, prop26, I26);
                                    
     OntClass classLicense = model.getOntClass(NS + "License");
Individual I27 = model.createIndividual(NS + courant.getChild( "License" ).getValue(), classLicense);
Property prop27 = model.getProperty(NS +"hasLicense");
     model.add(I1, prop27, I27);
                                    
     OntClass classChange_log = model.getOntClass(NS + "Change_log");
Individual I28 = model.createIndividual(NS + courant.getChild( "ChangeLog" ).getValue(), classChange_log);
Property prop28 = model.getProperty(NS +"hasChange_log");
     model.add(I1, prop28, I28);
                                    
     OntClass classCreation_date = model.getOntClass(NS + "Creation_date");
Individual I29 = model.createIndividual(NS + courant.getChild( "CreationDate" ).getValue(), classCreation_date);
Property prop29 = model.getProperty(NS +"hasCreation_date");
     model.add(I1, prop29, I29);                               
     
     PrintStream p;
						
	p = new PrintStream("MetaProPOSv2.owl");
        model.write(p);
       p.close();                        
     
                                }
                                
        textArea1.append( "Problem : " +racine.getChild( "Problem" ).getValue() );
	textArea1.append("\n");
                                                                     String inputFileName ="MetaProPOSv2.owl";
        String NS = "http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#";
        
        OntModel model = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM_TRANS_INF, null);
				
	    InputStream in = FileManager.get().open(inputFileName);            
            
         if (in == null) {
                     System.out.println("File: " + inputFileName + " not found");
                     System.exit(0);
                       }
         model.read(in, "RDF/XML");
         
         
         
         OntClass classPattern = model.getOntClass(NS + "Pattern");
         Individual I1 = model.createIndividual(NS +naame, classPattern);
									    
									   
OntClass classProblem = model.getOntClass(NS + "Problem");
Individual I11 = model.createIndividual(NS + racine.getChild( "Problem" ).getValue(), classProblem);
Property prop11 = model.getProperty(NS +"HasProblem");
     model.add(I1, prop11, I11);                     
     
     
     
     textArea1.append( "Solution : " +racine.getChild( "Solution" ).getText() );
     textArea1.append("\n");
     
     OntClass classSolution = model.getOntClass(NS + "Solution");
Individual I12 = model.createIndividual(NS + racine.getChild( "Solution" ).getText(), classSolution);

Property prop12 = model.getProperty(NS +"HasSolution");

					model.add(I1, prop12, I12);
                               
                                        
                                        
    textArea1.append( "Role : " +racine.getChild( "Role" ).getText() );
     textArea1.append("\n");
     
     OntClass classRole = model.getOntClass(NS + "Role");
Individual I13 = model.createIndividual(NS + racine.getChild( "Role" ).getText(), classSolution);

Property prop13 = model.getProperty(NS +"HasRole");

					model.add(I1, prop13, I13);


                                        
     textArea1.append( "Artifact : " +racine.getChild( "Artifact" ).getText() );
     textArea1.append("\n");
     
     OntClass classArtifact = model.getOntClass(NS + "Artifact");
Individual I14 = model.createIndividual(NS + racine.getChild( "Artifact" ).getText(), classArtifact);

Property prop14 = model.getProperty(NS +"HasArtifact");

					model.add(I1, prop14, I14);
                                        
                                        
                                        
        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
           PrintStream p;
						
	p = new PrintStream("MetaProPOSv2.owl");
        model.write(p);
       p.close();                        
                                
                 JOptionPane.showMessageDialog(null," Done ✔ ");
}
    
    
    public void affiche(){
        
        String inputFileName ="C:\\Users\\Saber\\Documents\\NetBeansProjects\\ProjetOnt\\MetaProPOSv2.owl";
        String NS = "http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#";
        
        OntModel model = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM_TRANS_INF, null);
		
	    InputStream in = FileManager.get().open(inputFileName);            
            
         if (in == null) {
                     System.out.println("File: " + inputFileName + " not found");
                     System.exit(0);
                       }
         model.read(in, "RDF/XML");
         
         FileReader flux;
		    BufferedReader input;
		    String str;
                    bar.setMinimum(0);
                    bar.setMaximum(100);
		    try{ 
		    	flux= new FileReader (inputFileName); 
		     
		        input= new BufferedReader( flux);
		      
		        
		        while((str=input.readLine())!=null)
		           {
		             jTextArea1.append(str);
		             jTextArea1.append("\n");
                         for(int iii=0;iii<=100;iii++){
                             bar.setValue(iii);
                             label.setText(iii+ " % ");
                         }
                             
		             }
                        JOptionPane.showMessageDialog(null, "File Already loaded");
		            }catch (IOException e)
		            {
		                System.out.println("Impossible d'ouvrir le fichier : " +e.toString()); //System.err.println -> si c'est une erreur, faut l'afficher sur le bon flux. e.toString ? autant faire un e.printStackTrace() qui sera plus précis
		            }
        
        
        
    }
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.edisoncor.gui.progressBar.ProgressBarRound bar;
    private org.edisoncor.gui.button.ButtonAction buttonAction1;
    private org.edisoncor.gui.button.ButtonAction buttonAction2;
    private org.edisoncor.gui.button.ButtonAction buttonAction4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel label;
    private org.edisoncor.gui.label.LabelMetric labelMetric2;
    private org.edisoncor.gui.panel.Panel panel1;
    private org.edisoncor.gui.panel.Panel panel2;
    private org.edisoncor.gui.panel.Panel panel4;
    private org.edisoncor.gui.tabbedPane.TabbedPaneHeader tabbedPaneHeader1;
    private javax.swing.JTextArea textArea1;
    private org.edisoncor.gui.textField.TextField textField1;
    // End of variables declaration//GEN-END:variables
}

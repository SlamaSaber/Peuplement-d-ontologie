/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package projetont;

import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.ontology.OntModelSpec;
import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.QueryExecution;
import com.hp.hpl.jena.query.QueryExecutionFactory;
import com.hp.hpl.jena.query.QueryFactory;
import com.hp.hpl.jena.query.QuerySolution;
import com.hp.hpl.jena.query.ResultSet;
import com.hp.hpl.jena.query.ResultSetFormatter;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.rdf.model.RDFNode;
import com.hp.hpl.jena.util.FileManager;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static org.eclipse.jetty.util.IO.delete;

/**
 *
 * @author Saber
 */
public class HomeforUser extends javax.swing.JFrame {

    /**
     * Creates new form HomeforUser
     */
    public HomeforUser() {
        initComponents();
        setDefaultCloseOperation(Home.HIDE_ON_CLOSE);
        setResizable(false);
        this.setTitle("MeatPro-POP Search");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPaneHeader2 = new org.edisoncor.gui.tabbedPane.TabbedPaneHeader();
        panel1 = new org.edisoncor.gui.panel.Panel();
        panel3 = new org.edisoncor.gui.panel.Panel();
        buttonAction3 = new org.edisoncor.gui.button.ButtonAction();
        TextField1 = new org.edisoncor.gui.textField.TextFieldRectIcon();
        ComboBox1 = new javax.swing.JComboBox();
        ComboBox2 = new javax.swing.JComboBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        rslt = new javax.swing.JTextArea();
        list = new javax.swing.JComboBox();
        buttonAction1 = new org.edisoncor.gui.button.ButtonAction();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Patterns Search");

        panel3.setColorPrimario(new java.awt.Color(0, 153, 153));

        buttonAction3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.jpg"))); // NOI18N
        buttonAction3.setText("Search");
        buttonAction3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction3ActionPerformed(evt);
            }
        });

        TextField1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.jpg"))); // NOI18N

        ComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Identification", "Problem" }));
        ComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBox1ActionPerformed(evt);
            }
        });

        rslt.setColumns(20);
        rslt.setRows(5);
        jScrollPane4.setViewportView(rslt);

        list.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listActionPerformed(evt);
            }
        });

        buttonAction1.setText("Exit");
        buttonAction1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel3Layout = new javax.swing.GroupLayout(panel3);
        panel3.setLayout(panel3Layout);
        panel3Layout.setHorizontalGroup(
            panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel3Layout.createSequentialGroup()
                .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(TextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel3Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(ComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel3Layout.createSequentialGroup()
                        .addGap(221, 221, 221)
                        .addComponent(buttonAction3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(list, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panel3Layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(ComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonAction1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(panel3Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 907, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panel3Layout.setVerticalGroup(
            panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel3Layout.createSequentialGroup()
                .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel3Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(buttonAction1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel3Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonAction3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panel3Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(list, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(23, 23, 23)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 902, Short.MAX_VALUE)
            .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(panel3, javax.swing.GroupLayout.PREFERRED_SIZE, 902, Short.MAX_VALUE))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 373, Short.MAX_VALUE)
            .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panel1Layout.createSequentialGroup()
                    .addComponent(panel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        tabbedPaneHeader2.addTab("Search", panel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPaneHeader2, javax.swing.GroupLayout.DEFAULT_SIZE, 902, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(tabbedPaneHeader2, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAction3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAction3ActionPerformed
        String SOURCE = "MetaProPOSv2.owl";

        OntModel model = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM_TRANS_INF);
        model.read( SOURCE, "RDF/XML" );

        //****************************************************************************************************
int i=1;
        if (("Identification".equals(ComboBox1.getSelectedItem().toString()))&& ("Author".equals(ComboBox2.getSelectedItem().toString()))){
            list.removeAllItems();
            rslt.setText("");
            if( "".equals(TextField1.getText())){
                JOptionPane.showMessageDialog(null, "You should fill the Field");
            }
            else{

                //	TextArea1.setText("");
                String queryString =
                "PREFIX MetaProPOSv2:<http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#>" +

                "select ?Pattern " +

                "where  {" +
                " ?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasAuthor> ?Author FILTER regex(str(?Author) , \"" + TextField1.getText().toLowerCase()+ "\" ). "+
                //" ?Identfier   <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#Pattern> ?Pattern   ."+

                "}";

                
                Query query = QueryFactory.create(queryString);
                QueryExecution qexec = QueryExecutionFactory.create(query, model);
                ResultSet rs3 = qexec.execSelect() ;
                while (  rs3.hasNext()  )
                {

                    String filename="Result Of Search by Author";

                    File f=new File("C:\\Users\\Saber\\Documents\\NetBeansProjects\\ProjetOnt\\Result Of Search\\"+filename + i+".txt");

                        PrintWriter p=null;
                        try {
                            p=new PrintWriter(new FileWriter(f));
                        } catch (IOException ex) {
                            Logger.getLogger(search.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        QuerySolution rb3 = rs3.nextSolution() ;

                        RDFNode y4 = rb3.get("Pattern");

                        //System.out.println(y4);
                        String s= y4.toString();

                        String n= s.substring(66);

                        //p.println("Name: "+n);
                        //p.println(" ");

                        //            TextArea1.append("Name: "+n);
                        //           TextArea1.append("\n");

                        list.addItem(n);

                        String [] tab = new String [9];
                        tab[0]="Name";
                        tab[1]="Identifier";
                        tab[2]="Author";
                        tab[3]="Problem";
                        tab[4]="Solution";
                        tab[5]="Domain";
                        tab[6]="Type";
                        tab[7]="Collection";
                        tab[8]="Abstraction_level";

                        String query1 =
                        "PREFIX MetaProPOSv2:<http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#>" +

                        "select * " +

                        "where  {" +
                        " ?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasName> ?Name." +
                        " ?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasIdentifier> ?Identifier." +
                        " ?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasAuthor> ?Author." +
                        "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#HasProblem> ?Problem." +
                        "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#HasSolution> ?Solution." +
                        "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasDomain> ?Domain." +
                        "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasType> ?Type." +
                        "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasCollection> ?Collection." +
                        "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasAbstractionLevel> ?Abstraction_level." +
                        //"?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasInitialContext> ?Initial_context." +
                        //"?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasResultingContext> ?Resulting_context." +

                        "FILTER regex(str(?Pattern),\""+s+"\")"+

                        "}";

                        for(int j=0;j<9;j++)
                        {
                            Query query12;
                            query12 = QueryFactory.create(query1);
                            QueryExecution qexec1 = QueryExecutionFactory.create(query1, model);
                            ResultSet rs1 = qexec1.execSelect() ;

                            while (  (rs1.hasNext()) && (j<9)   )
                            {  QuerySolution rb12= rs1.nextSolution() ;

                                String ss=tab[j];
                                RDFNode y1 = rb12.get(ss);
                                String s1= y1.toString();
                                String r1= s1.substring(66);
                                System.out.println(ss +": "+r1);

                                if((j==3) || (j==4) || (j==5) )
                                {
                                    p.println("**********************************************");
                                }
                                p.println(ss +": "+r1);
                                p.println(" ");

                            }

                        }

                        p.close();
                       
                        

                        i++;
                        
                    }
                
                    
                    
                 
                      
                    
                    
                    
            }}

            //****************************************************************************************************

            
        if (("Identification".equals(ComboBox1.getSelectedItem().toString()))&& ("Identifier".equals(ComboBox2.getSelectedItem().toString()))){
            list.removeAllItems();
            rslt.setText("");
            if( "".equals(TextField1.getText())){
                JOptionPane.showMessageDialog(null, "You should fill the Field");
            }
            else{

                //	TextArea1.setText("");
                String queryString =
                "PREFIX MetaProPOSv2:<http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#>" +

                "select ?Pattern " +

                "where  {" +
                " ?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasIdentifier> ?Identifier FILTER regex(str(?Identifier) , \"" + TextField1.getText().toLowerCase()+ "\" ). "+
                //" ?Identfier   <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#Pattern> ?Pattern   ."+

                "}";

                //int i=1;
                Query query = QueryFactory.create(queryString);
                QueryExecution qexec = QueryExecutionFactory.create(query, model);
                ResultSet rs3 = qexec.execSelect() ;
                while (  rs3.hasNext()  )
                {

                    String filename="Result Of Search by Identifier";

                    File f=new File("C:\\Users\\Saber\\Documents\\NetBeansProjects\\ProjetOnt\\Result Of Search\\"+filename + i+".txt");

                        PrintWriter p=null;
                        try {
                            p=new PrintWriter(new FileWriter(f));
                        } catch (IOException ex) {
                            Logger.getLogger(search.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        QuerySolution rb3 = rs3.nextSolution() ;

                        RDFNode y4 = rb3.get("Pattern");

                        //System.out.println(y4);
                        String s= y4.toString();

                        String n= s.substring(66);

                        //p.println("Name: "+n);
                        //p.println(" ");

                        //            TextArea1.append("Name: "+n);
                        //           TextArea1.append("\n");

                        list.addItem(n);

                        String [] tab = new String [9];
                        tab[0]="Name";
                        tab[1]="Identifier";
                        tab[2]="Author";
                        tab[3]="Problem";
                        tab[4]="Solution";
                        tab[5]="Domain";
                        tab[6]="Type";
                        tab[7]="Collection";
                        tab[8]="Abstraction_level";

                        String query1 =
                        "PREFIX MetaProPOSv2:<http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#>" +

                        "select * " +

                        "where  {" +
                        " ?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasName> ?Name." +
                        " ?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasIdentifier> ?Identifier." +
                        " ?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasAuthor> ?Author." +
                        "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#HasProblem> ?Problem." +
                        "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#HasSolution> ?Solution." +
                        "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasDomain> ?Domain." +
                        "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasType> ?Type." +
                        "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasCollection> ?Collection." +
                        "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasAbstractionLevel> ?Abstraction_level." +
                        //"?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasInitialContext> ?Initial_context." +
                        //"?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasResultingContext> ?Resulting_context." +

                        "FILTER regex(str(?Pattern),\""+s+"\")"+

                        "}";

                        for(int j=0;j<9;j++)
                        {
                            Query query12;
                            query12 = QueryFactory.create(query1);
                            QueryExecution qexec1 = QueryExecutionFactory.create(query1, model);
                            ResultSet rs1 = qexec1.execSelect() ;

                            while (  (rs1.hasNext()) && (j<9)   )
                            {  QuerySolution rb12= rs1.nextSolution() ;

                                String ss=tab[j];
                                RDFNode y1 = rb12.get(ss);
                                String s1= y1.toString();
                                String r1= s1.substring(66);
                                System.out.println(ss +": "+r1);

                                if((j==3) || (j==4) || (j==5) )
                                {
                                    p.println("**********************************************");
                                }
                                p.println(ss +": "+r1);
                                p.println(" ");

                            }

                        }
                        p.close();
                       
                        

                        i++;
                        
                    }
                
                    
                    
                 
                      
                    
                    
                    
            }}

            //****************************************************************************************************
        
        
        
        
        
                else if (("Identification".equals(ComboBox1.getSelectedItem().toString()))&& ("Name".equals(ComboBox2.getSelectedItem().toString()))){

                    list.removeAllItems();
                    rslt.setText("");
                    if( "".equals(TextField1.getText())){
                        JOptionPane.showMessageDialog(null, "You should fill the Field");
                    }
                    else{
                        //              TextArea1.setText("");
                        String queryString2 =
                        "PREFIX MetaProPOSv2:<http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#>" +

                        "select ?Pattern " +

                        "where  {" +
                        " ?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasName> ?Name FILTER regex(str(?Name) , \"" + TextField1.getText().toLowerCase()+ "\" ). "+

                        "}";

                        int ii=1;
                        Query query122 = QueryFactory.create(queryString2);
                        QueryExecution qexec2 = QueryExecutionFactory.create(query122, model);
                        ResultSet rs33 = qexec2.execSelect() ;
                        while (  rs33.hasNext()  )
                        {

                            String filename2="Result Of Search by Name";

                            File ff=new File("C:\\Users\\Saber\\Documents\\NetBeansProjects\\ProjetOnt\\Result Of Search\\"+filename2 + ii+".txt");
                                PrintWriter p1=null;
                                try {
                                    p1=new PrintWriter(new FileWriter(ff));
                                } catch (IOException ex) {
                                    Logger.getLogger(search.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                QuerySolution rb13 = rs33.nextSolution() ;

                                RDFNode y14 = rb13.get("Pattern");

                                //System.out.println(y4);
                                String ss= y14.toString();

                                String nn= ss.substring(66);

                                //p.println("Name: "+n);
                                //p.println(" ");
                                list.addItem(nn);

                                //            TextArea1.append("Name: "+nn);
                                //           TextArea1.append("\n");

                                String [] tab1 = new String [9];
                                tab1[0]="Name";
                                tab1[1]="Identifier";
                                tab1[2]="Author";
                                tab1[3]="Problem";
                                tab1[4]="Solution";
                                tab1[5]="Domain";
                                tab1[6]="Type";
                                tab1[7]="Collection";
                                tab1[8]="Abstraction_level";

                                String query13 =
                                "PREFIX MetaProPOSv2:<http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#>" +

                                "select * " +

                                "where  {" +
                                " ?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasName> ?Name." +
                                " ?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasIdentifier> ?Identifier." +
                                " ?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasAuthor> ?Author." +
                                "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#HasProblem> ?Problem." +
                                "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#HasSolution> ?Solution." +
                                "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasDomain> ?Domain." +
                                "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasType> ?Type." +
                                "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasCollection> ?Collection." +
                                "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasAbstractionLevel> ?Abstraction_level." +
                                //"?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasInitialContext> ?Initial_context." +
                                //"?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasResultingContext> ?Resulting_context." +

                                "FILTER regex(str(?Pattern),\""+ss+"\")"+

                                "}";

                                for(int j=0;j<9;j++)
                                {
                                    Query query12;
                                    query12 = QueryFactory.create(query13);
                                    QueryExecution qexec1 = QueryExecutionFactory.create(query12, model);
                                    ResultSet rs1 = qexec1.execSelect() ;

                                    while (  (rs1.hasNext()) && (j<9)   )
                                    {  QuerySolution rb12= rs1.nextSolution() ;

                                        String sss=tab1[j];
                                        RDFNode y1 = rb12.get(sss);
                                        String s1= y1.toString();
                                        String r1= s1.substring(66);
                                        if((j==3) || (j==4) || (j==5) )
                                        {
                                            p1.println("**********************************************");
                                        }
                                        System.out.println(sss +": "+r1);
                                        p1.println(sss +": "+r1);
                                        p1.println(" ");

                                    }

                                }
                                p1.close();
                                // Pour l'instant nous nous limitons a des requetes de type SELECT

                                // Affichage des resultats
                                // System.out.print(ResultSetFormatter.asText(rs1));

                                /**String res=ResultSetFormatter.asXMLString(rs1);

                                System.out.println(res);

                                p.println(res);

                                p.close();
                                **/

                                ii++;
                            }

                        }}

                        else if (("Problem".equals(ComboBox1.getSelectedItem().toString()))){
                            
                            list.removeAllItems();
                            rslt.setText("");
                            if( "".equals(TextField1.getText())){
                                JOptionPane.showMessageDialog(null, "You should fill the Field");
                            }
                            else{
                                //              TextArea1.setText("");
                                String cont=TextField1.getText().toLowerCase();
                                if ((" ".equals(cont))|| (".".equals(cont)) || ("?".equals(cont)) || ("!".equals(cont))){
                                    JOptionPane.showMessageDialog(null, "please write a significant word");
                                }else{

                                    String queryString2 =
                                    "PREFIX MetaProPOSv2:<http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#>" +

                                    "select ?Pattern " +

                                    "where  {" +
                                    " ?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#HasProblem> ?Problem. FILTER regex(str(?Problem) , \"" + TextField1.getText().toLowerCase()+ "\" ) "+

                                    "}";

                                    int ii=1;
                                    Query query122 = QueryFactory.create(queryString2);
                                    QueryExecution qexec2 = QueryExecutionFactory.create(query122, model);
                                    ResultSet rs33 = qexec2.execSelect() ;
                                    while (  rs33.hasNext()  )
                                    {

                                        String filename2="Result Of Search by Problem";

                                        File ff=new File("C:\\Users\\Saber\\Documents\\NetBeansProjects\\ProjetOnt\\Result Of Search\\"+filename2 + ii+".txt");
                                            PrintWriter p1=null;
                                            try {
                                                p1=new PrintWriter(new FileWriter(ff));
                                            } catch (IOException ex) {
                                                Logger.getLogger(search.class.getName()).log(Level.SEVERE, null, ex);
                                            }
                                            QuerySolution rb13 = rs33.nextSolution() ;

                                            RDFNode y14 = rb13.get("Pattern");

                                            //System.out.println(y4);
                                            String ss= y14.toString();

                                            String nn= ss.substring(66);

                                            //p.println("Name: "+n);
                                            //p.println(" ");
                                            list.addItem(nn);

                                            //            TextArea1.append("Name: "+nn);
                                            //           TextArea1.append("\n");
                                            //             list.addItem(nn);

                                            String [] tab1 = new String [9];
                                            tab1[0]="Name";
                                            tab1[1]="Identifier";
                                            tab1[2]="Author";
                                            tab1[3]="Problem";
                                            tab1[4]="Solution";
                                            tab1[5]="Domain";
                                            tab1[6]="Type";
                                            tab1[7]="Collection";
                                            tab1[8]="Abstraction_level";

                                            String query13 =
                                            "PREFIX MetaProPOSv2:<http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#>" +

                                            "select * " +

                                            "where  {" +
                                            " ?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasName> ?Name." +
                                            " ?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasIdentifier> ?Identifier." +
                                            " ?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasAuthor> ?Author." +
                                            "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#HasProblem> ?Problem." +
                                            "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#HasSolution> ?Solution." +
                                            "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasDomain> ?Domain." +
                                            "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasType> ?Type." +
                                            "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasCollection> ?Collection." +
                                            "?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasAbstractionLevel> ?Abstraction_level." +
                                            //"?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasInitialContext> ?Initial_context." +
                                            //"?Pattern <http://www.semanticweb.org/ontologies/2013/11/20/MetaProPOSv2.owl#hasResultingContext> ?Resulting_context." +

                                            "FILTER regex(str(?Pattern),\""+ss+"\")"+

                                            "}";

                                            for(int j=0;j<9;j++)
                                            {
                                                Query query12;
                                                query12 = QueryFactory.create(query13);
                                                QueryExecution qexec1 = QueryExecutionFactory.create(query12, model);
                                                ResultSet rs1 = qexec1.execSelect() ;

                                                while (  (rs1.hasNext()) && (j<9)   )
                                                {  QuerySolution rb12= rs1.nextSolution() ;

                                                    String sss=tab1[j];
                                                    RDFNode y1 = rb12.get(sss);
                                                    String s1= y1.toString();
                                                    String r1= s1.substring(66);
                                                    if((j==3) || (j==4) || (j==5) )
                                                    {
                                                        p1.println("**********************************************");
                                                    }
                                                    System.out.println(sss +": "+r1);
                                                    p1.println(sss +": "+r1);
                                                    p1.println(" ");

                                             //       String res=ResultSetFormatter.asXMLString(rs1);

                                               //     System.out.println(res);

                                                 //   p1.println(res);

                                                }

                                            }
                                            p1.close();
                                            // Pour l'instant nous nous limitons a des requetes de type SELECT

                                            // Affichage des resultats
                                            // System.out.print(ResultSetFormatter.asText(rs1));

                                            ii++;
                                        }

                                    }

                                }
                            }
    }//GEN-LAST:event_buttonAction3ActionPerformed

    private void ComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBox1ActionPerformed
        ComboBox2.removeAllItems();
        switch (ComboBox1.getSelectedItem().toString()) {

            case "Identification":
            ComboBox2.setEnabled(true);
            ComboBox2.addItem("Identifier");
            ComboBox2.addItem("Author");
            ComboBox2.addItem("Name");
            break;

            case "Problem":
            ComboBox2.setEnabled(false);
            break;

        }
    }//GEN-LAST:event_ComboBox1ActionPerformed

    private void listActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listActionPerformed
         int aa = list.getSelectedIndex();
         String ss=null;
         if ("Identification".equals(ComboBox1.getSelectedItem().toString())){
              ss=ComboBox2.getSelectedItem().toString();
         }
         if("Problem".equals(ComboBox1.getSelectedItem().toString()))
         {
             ss=ComboBox1.getSelectedItem().toString();
         }
                     if (aa==0){
                         int g=1;
                         rslt.setText("");
                         aficherslt(aa,g,ss);
                     }
                      if (aa==1){
                         
                         int g=2;
                         rslt.setText("");
                         aficherslt(aa,g,ss);
                     }
                      if (aa==2){
                         
                         int g=3;
                         rslt.setText("");
                         aficherslt(aa,g,ss);
                     }
                      if (aa==3){
                         
                         int g=4;
                         rslt.setText("");
                         aficherslt(aa,g,ss);
                     }
                      if (aa==4){
                         
                         int g=5;
                         rslt.setText("");
                         aficherslt(aa,g,ss);
                     }
                      if (aa==5){
                         
                         int g=6;
                         rslt.setText("");
                         aficherslt(aa,g,ss);
                     }
                      
    }//GEN-LAST:event_listActionPerformed

    private void buttonAction1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAction1ActionPerformed
       File direc = new File("C:\\Users\\Saber\\Documents\\NetBeansProjects\\ProjetOnt\\Result Of Search");
    	if(direc.exists()){
    		
    		
    			File[] ll=direc.listFiles();
           for (File ll1 : ll) {
               delete(ll1);
           }                                        

        }
        System.exit(0);
    }//GEN-LAST:event_buttonAction1ActionPerformed

    public void aficherslt(int cs, int nf,String option){
        
        
                    
                    
      String inputFileName ="C:\\Users\\Saber\\Documents\\NetBeansProjects\\ProjetOnt\\Result Of Search\\Result Of Search by ";
      inputFileName +=option;
      String file=inputFileName+nf+".txt";
      
        
      
         
         FileReader flux = null;
		    BufferedReader input;
		    String str;
                    try {
                        flux= new FileReader (file);
                    } catch (FileNotFoundException ex) { 
                        Logger.getLogger(HomeforUser.class.getName()).log(Level.SEVERE, null, ex);
                    }
		     
		        input= new BufferedReader( flux);
                    try {                    
                        while((str=input.readLine())!=null)
                        {
                            rslt.append(str);
                            rslt.append("\n");
                            
                            
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(HomeforUser.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                
        
        
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeforUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeforUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeforUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeforUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeforUser().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox ComboBox1;
    private javax.swing.JComboBox ComboBox2;
    private org.edisoncor.gui.textField.TextFieldRectIcon TextField1;
    private org.edisoncor.gui.button.ButtonAction buttonAction1;
    private org.edisoncor.gui.button.ButtonAction buttonAction3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JComboBox list;
    private org.edisoncor.gui.panel.Panel panel1;
    private org.edisoncor.gui.panel.Panel panel3;
    private javax.swing.JTextArea rslt;
    private org.edisoncor.gui.tabbedPane.TabbedPaneHeader tabbedPaneHeader2;
    // End of variables declaration//GEN-END:variables
}
